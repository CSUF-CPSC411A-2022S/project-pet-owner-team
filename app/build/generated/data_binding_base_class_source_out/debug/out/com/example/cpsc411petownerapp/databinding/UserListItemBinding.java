// Generated by view binder compiler. Do not edit!
package com.example.cpsc411petownerapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cpsc411petownerapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UserListItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView address;

  @NonNull
  public final TextView age;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView petAge;

  @NonNull
  public final TextView petName;

  @NonNull
  public final TextView petType;

  @NonNull
  public final TextView phoneNumber;

  @NonNull
  public final TextView position;

  @NonNull
  public final TextView sex;

  private UserListItemBinding(@NonNull ConstraintLayout rootView, @NonNull TextView address,
      @NonNull TextView age, @NonNull TextView name, @NonNull TextView petAge,
      @NonNull TextView petName, @NonNull TextView petType, @NonNull TextView phoneNumber,
      @NonNull TextView position, @NonNull TextView sex) {
    this.rootView = rootView;
    this.address = address;
    this.age = age;
    this.name = name;
    this.petAge = petAge;
    this.petName = petName;
    this.petType = petType;
    this.phoneNumber = phoneNumber;
    this.position = position;
    this.sex = sex;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UserListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UserListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.user_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UserListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.address;
      TextView address = ViewBindings.findChildViewById(rootView, id);
      if (address == null) {
        break missingId;
      }

      id = R.id.age;
      TextView age = ViewBindings.findChildViewById(rootView, id);
      if (age == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.petAge;
      TextView petAge = ViewBindings.findChildViewById(rootView, id);
      if (petAge == null) {
        break missingId;
      }

      id = R.id.petName;
      TextView petName = ViewBindings.findChildViewById(rootView, id);
      if (petName == null) {
        break missingId;
      }

      id = R.id.petType;
      TextView petType = ViewBindings.findChildViewById(rootView, id);
      if (petType == null) {
        break missingId;
      }

      id = R.id.phoneNumber;
      TextView phoneNumber = ViewBindings.findChildViewById(rootView, id);
      if (phoneNumber == null) {
        break missingId;
      }

      id = R.id.position;
      TextView position = ViewBindings.findChildViewById(rootView, id);
      if (position == null) {
        break missingId;
      }

      id = R.id.sex;
      TextView sex = ViewBindings.findChildViewById(rootView, id);
      if (sex == null) {
        break missingId;
      }

      return new UserListItemBinding((ConstraintLayout) rootView, address, age, name, petAge,
          petName, petType, phoneNumber, position, sex);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
