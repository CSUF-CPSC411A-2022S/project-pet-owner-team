// Generated by data binding compiler. Do not edit!
package com.example.cpsc411petownerapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.RecyclerView;
import com.example.cpsc411petownerapp.InfoViewModel;
import com.example.cpsc411petownerapp.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class InfoBinding extends ViewDataBinding {
  @NonNull
  public final Button add;

  @NonNull
  public final EditText address;

  @NonNull
  public final EditText age;

  @NonNull
  public final TextView errorMsg;

  @NonNull
  public final TextView infoList;

  @NonNull
  public final EditText name;

  @NonNull
  public final EditText petAge;

  @NonNull
  public final EditText petName;

  @NonNull
  public final EditText petType;

  @NonNull
  public final EditText phoneNumber;

  @NonNull
  public final EditText sex;

  @NonNull
  public final RecyclerView userList;

  @Bindable
  protected InfoViewModel mInfoViewModel;

  protected InfoBinding(Object _bindingComponent, View _root, int _localFieldCount, Button add,
      EditText address, EditText age, TextView errorMsg, TextView infoList, EditText name,
      EditText petAge, EditText petName, EditText petType, EditText phoneNumber, EditText sex,
      RecyclerView userList) {
    super(_bindingComponent, _root, _localFieldCount);
    this.add = add;
    this.address = address;
    this.age = age;
    this.errorMsg = errorMsg;
    this.infoList = infoList;
    this.name = name;
    this.petAge = petAge;
    this.petName = petName;
    this.petType = petType;
    this.phoneNumber = phoneNumber;
    this.sex = sex;
    this.userList = userList;
  }

  public abstract void setInfoViewModel(@Nullable InfoViewModel infoViewModel);

  @Nullable
  public InfoViewModel getInfoViewModel() {
    return mInfoViewModel;
  }

  @NonNull
  public static InfoBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.info, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static InfoBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<InfoBinding>inflateInternal(inflater, R.layout.info, root, attachToRoot, component);
  }

  @NonNull
  public static InfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.info, null, false, component)
   */
  @NonNull
  @Deprecated
  public static InfoBinding inflate(@NonNull LayoutInflater inflater, @Nullable Object component) {
    return ViewDataBinding.<InfoBinding>inflateInternal(inflater, R.layout.info, null, false, component);
  }

  public static InfoBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static InfoBinding bind(@NonNull View view, @Nullable Object component) {
    return (InfoBinding)bind(component, view, R.layout.info);
  }
}
